CONSULTA 4.1
-> Sort: total_vendas DESC  (actual time=1463..1463 rows=3095 loops=1)
     -> Table scan on <temporary>  (actual time=1461..1461 rows=3095 loops=1)
         -> Aggregate using temporary table  (actual time=1461..1461 rows=3095 loops=1)
             -> Nested loop inner join  (cost=95021 rows=119160) (actual time=0.75..1229 rows=119463 loops=1)
                 -> Nested loop inner join  (cost=53315 rows=119160) (actual time=0.729..914 rows=119463 loops=1)
                     -> Filter: (op.order_id is not null)  (cost=12631 rows=115071) (actual time=0.658..96.4 rows=115986 loops=1)
                         -> Covering index scan on op using idx_order_payment_value  (cost=12631 rows=115071) (actual time=0.654..82.8 rows=115986 loops=1)
                     -> Filter: (oi.seller_id is not null)  (cost=0.25 rows=1.04) (actual time=0.00522..0.00674 rows=1.03 loops=115986)
                         -> Index lookup on oi using PRIMARY (order_id=op.order_id)  (cost=0.25 rows=1.04) (actual time=0.00503..0.00647 rows=1.03 loops=115986)
                 -> Single-row covering index lookup on s using PRIMARY (seller_id=oi.seller_id)  (cost=0.25 rows=1) (actual time=0.00226..0.00231 rows=1 loops=119463)
 

CONSULTA 4.2
-> Limit: 10 row(s)  (actual time=305..305 rows=10 loops=1)
     -> Sort: total_gasto DESC, limit input to 10 row(s) per chunk  (actual time=305..305 rows=10 loops=1)
         -> Table scan on <temporary>  (actual time=300..302 rows=14516 loops=1)
             -> Aggregate using temporary table  (actual time=300..300 rows=14516 loops=1)
                 -> Nested loop inner join  (cost=53414 rows=32457) (actual time=3.26..256 rows=17240 loops=1)
                     -> Nested loop inner join  (cost=22239 rows=27798) (actual time=3.23..131 rows=14516 loops=1)
                         -> Filter: (o.customer_id is not null)  (cost=12509 rows=27798) (actual time=3.21..69.9 rows=14516 loops=1)
                             -> Index range scan on o using idx_order_date over ('2017-01-01 00:00:00' <= order_purchase_timestamp < '2017-06-30 00:00:00'), with index condition: ((o.order_purchase_timestamp >= TIMESTAMP'2017-01-01 00:00:00') and (o.order_purchase_timestamp < TIMESTAMP'2017-06-30 00:00:00'))  (cost=12509 rows=27798) (actual time=3.2..68 rows=14516 loops=1)
                         -> Single-row covering index lookup on c using PRIMARY (customer_id=o.customer_id)  (cost=0.25 rows=1) (actual time=0.00385..0.00389 rows=1 loops=14516)
                     -> Filter: (o.order_id = op.order_id)  (cost=1 rows=1.17) (actual time=0.00616..0.00811 rows=1.19 loops=14516)
                         -> Covering index lookup on op using idx_order_payment_value (order_id=o.order_id)  (cost=1 rows=1.17) (actual time=0.0053..0.00703 rows=1.19 loops=14516)
 

CONSULTA 4.3
-> Sort: media_avaliacao DESC  (actual time=1541..1541 rows=3090 loops=1)
     -> Table scan on <temporary>  (actual time=1538..1539 rows=3090 loops=1)
         -> Aggregate using temporary table  (actual time=1538..1538 rows=3090 loops=1)
             -> Nested loop inner join  (cost=78862 rows=100262) (actual time=0.506..1324 rows=102230 loops=1)
                 -> Nested loop inner join  (cost=44631 rows=96821) (actual time=0.477..513 rows=99224 loops=1)
                     -> Table scan on orw  (cost=10743 rows=96821) (actual time=0.428..77 rows=99224 loops=1)
                     -> Filter: (orw.order_id = o.order_id)  (cost=0.25 rows=1) (actual time=0.004..0.00414 rows=1 loops=99224)
                         -> Single-row covering index lookup on o using PRIMARY (order_id=orw.order_id)  (cost=0.25 rows=1) (actual time=0.00322..0.00327 rows=1 loops=99224)
                 -> Filter: (o.order_id = oi.order_id)  (cost=0.25 rows=1.04) (actual time=0.00629..0.00774 rows=1.03 loops=99224)
                     -> Index lookup on oi using PRIMARY (order_id=o.order_id)  (cost=0.25 rows=1.04) (actual time=0.00553..0.00687 rows=1.03 loops=99224)
 

CONSULTA 4.4
-> Limit: 5 row(s)  (actual time=244..244 rows=5 loops=1)
     -> Sort: total_vendas DESC, limit input to 5 row(s) per chunk  (actual time=244..244 rows=5 loops=1)
         -> Table scan on <temporary>  (actual time=238..241 rows=6817 loops=1)
             -> Aggregate using temporary table  (actual time=238..238 rows=6817 loops=1)
                 -> Nested loop inner join  (cost=15861 rows=28786) (actual time=0.302..199 rows=14853 loops=1)
                     -> Filter: ((o.order_purchase_timestamp >= TIMESTAMP'2017-01-01 00:00:00') and (o.order_purchase_timestamp < TIMESTAMP'2017-06-30 00:00:00'))  (cost=6016 rows=27798) (actual time=0.255..25.6 rows=14516 loops=1)
                         -> Covering index range scan on o using idx_order_date over ('2017-01-01 00:00:00' <= order_purchase_timestamp < '2017-06-30 00:00:00')  (cost=6016 rows=27798) (actual time=0.251..17.8 rows=14516 loops=1)
                     -> Filter: (oi.order_id = o.order_id)  (cost=0.251 rows=1.04) (actual time=0.00932..0.0114 rows=1.02 loops=14516)
                         -> Covering index lookup on oi using PRIMARY (order_id=o.order_id)  (cost=0.251 rows=1.04) (actual time=0.00823..0.0102 rows=1.02 loops=14516)
 

CONSULTA 4.5
-> Limit: 5 row(s)  (actual time=244..244 rows=5 loops=1)
     -> Sort: total_vendas DESC, limit input to 5 row(s) per chunk  (actual time=244..244 rows=5 loops=1)
         -> Table scan on <temporary>  (actual time=238..241 rows=6817 loops=1)
             -> Aggregate using temporary table  (actual time=238..238 rows=6817 loops=1)
                 -> Nested loop inner join  (cost=15861 rows=28786) (actual time=0.302..199 rows=14853 loops=1)
                     -> Filter: ((o.order_purchase_timestamp >= TIMESTAMP'2017-01-01 00:00:00') and (o.order_purchase_timestamp < TIMESTAMP'2017-06-30 00:00:00'))  (cost=6016 rows=27798) (actual time=0.255..25.6 rows=14516 loops=1)
                         -> Covering index range scan on o using idx_order_date over ('2017-01-01 00:00:00' <= order_purchase_timestamp < '2017-06-30 00:00:00')  (cost=6016 rows=27798) (actual time=0.251..17.8 rows=14516 loops=1)
                     -> Filter: (oi.order_id = o.order_id)  (cost=0.251 rows=1.04) (actual time=0.00932..0.0114 rows=1.02 loops=14516)
                         -> Covering index lookup on oi using PRIMARY (order_id=o.order_id)  (cost=0.251 rows=1.04) (actual time=0.00823..0.0102 rows=1.02 loops=14516)
 
CONSULTA 4.6
-> Limit: 10 row(s)  (cost=10076 rows=10) (actual time=91.9..91.9 rows=10 loops=1)
     -> Sort: atraso_dias DESC, limit input to 10 row(s) per chunk  (cost=10076 rows=98750) (actual time=91.9..91.9 rows=10 loops=1)
         -> Filter: (o.order_delivered_customer_date > o.order_estimated_delivery_date)  (cost=10076 rows=98750) (actual time=0.289..87.8 rows=7827 loops=1)
             -> Table scan on o  (cost=10076 rows=98750) (actual time=0.277..74.1 rows=99441 loops=1)
  

CONSULTA 4.7
-> Limit: 10 row(s)  (actual time=2190..2190 rows=10 loops=1)
     -> Sort: total_gasto DESC, limit input to 10 row(s) per chunk  (actual time=2190..2190 rows=10 loops=1)
         -> Table scan on <temporary>  (actual time=2098..2148 rows=99440 loops=1)
             -> Aggregate using temporary table  (actual time=2098..2098 rows=99439 loops=1)
                 -> Nested loop inner join  (cost=52906 rows=115071) (actual time=3.13..631 rows=115986 loops=1)
                     -> Filter: (op.order_id is not null)  (cost=12631 rows=115071) (actual time=3.08..105 rows=115986 loops=1)
                         -> Covering index scan on op using idx_order_payment_value  (cost=12631 rows=115071) (actual time=3.08..90.5 rows=115986 loops=1)
                     -> Filter: (o.order_id = op.order_id)  (cost=0.25 rows=1) (actual time=0.00411..0.00426 rows=1 loops=115986)
                         -> Single-row index lookup on o using PRIMARY (order_id=op.order_id)  (cost=0.25 rows=1) (actual time=0.00331..0.00337 rows=1 loops=115986)
 

CONSULTA 4.8
-> Sort: media_tempo_entrega DESC  (actual time=578..578 rows=27 loops=1)
     -> Table scan on <temporary>  (actual time=578..578 rows=27 loops=1)
         -> Aggregate using temporary table  (actual time=578..578 rows=27 loops=1)
             -> Nested loop inner join  (cost=27357 rows=49375) (actual time=0.331..435 rows=96476 loops=1)
                 -> Filter: ((o.order_delivered_customer_date is not null) and (o.customer_id is not null))  (cost=10076 rows=49375) (actual time=0.295..92.3 rows=96476 loops=1)
                     -> Table scan on o  (cost=10076 rows=98750) (actual time=0.292..78.8 rows=99441 loops=1)
                 -> Single-row index lookup on c using PRIMARY (customer_id=o.customer_id)  (cost=0.25 rows=1) (actual time=0.00319..0.00325 rows=1 loops=96476)
 