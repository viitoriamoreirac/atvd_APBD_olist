CONSULTA 4.1
-> Sort: total_vendas DESC  (actual time=1845..1845 rows=3095 loops=1)
     -> Table scan on <temporary>  (actual time=1843..1843 rows=3095 loops=1)
         -> Aggregate using temporary table  (actual time=1843..1843 rows=3095 loops=1)
             -> Nested loop inner join  (cost=135296 rows=119160) (actual time=0.551..1621 rows=119463 loops=1)
                 -> Nested loop inner join  (cost=93590 rows=119160) (actual time=0.528..1330 rows=119463 loops=1)
                     -> Nested loop inner join  (cost=52906 rows=115071) (actual time=0.492..508 rows=115986 loops=1)
                         -> Filter: (op.order_id is not null)  (cost=12631 rows=115071) (actual time=0.426..92.2 rows=115986 loops=1)
                             -> Covering index scan on op using idx_order_payment_value  (cost=12631 rows=115071) (actual time=0.42..78.2 rows=115986 loops=1)
                         -> Filter: (o.order_id = op.order_id)  (cost=0.25 rows=1) (actual time=0.00321..0.00333 rows=1 loops=115986)
                             -> Single-row covering index lookup on o using PRIMARY (order_id=op.order_id)  (cost=0.25 rows=1) (actual time=0.00245..0.00248 rows=1 loops=115986)
                     -> Filter: ((oi.order_id = o.order_id) and (oi.seller_id is not null))  (cost=0.25 rows=1.04) (actual time=0.00535..0.00679 rows=1.03 loops=115986)
                         -> Index lookup on oi using PRIMARY (order_id=o.order_id)  (cost=0.25 rows=1.04) (actual time=0.00453..0.00586 rows=1.03 loops=115986)
                 -> Single-row covering index lookup on s using PRIMARY (seller_id=oi.seller_id)  (cost=0.25 rows=1) (actual time=0.00207..0.00212 rows=1 loops=119463)
 

 CONSULTA 4.2
-> Limit: 10 row(s)  (actual time=396..396 rows=10 loops=1)
     -> Sort: total_gasto DESC, limit input to 10 row(s) per chunk  (actual time=396..396 rows=10 loops=1)
         -> Table scan on <temporary>  (actual time=390..392 rows=14516 loops=1)
             -> Aggregate using temporary table  (actual time=390..390 rows=14516 loops=1)
                 -> Nested loop inner join  (cost=53429 rows=32466) (actual time=11.2..336 rows=17240 loops=1)
                     -> Nested loop inner join  (cost=22245 rows=27806) (actual time=10.5..180 rows=14516 loops=1)
                         -> Filter: (o.customer_id is not null)  (cost=12513 rows=27806) (actual time=10.5..103 rows=14516 loops=1)
                             -> Index range scan on o using idx_order_date over ('2017-01-01 00:00:00' <= order_purchase_timestamp <= '2017-06-30 00:00:00'), with index condition: (o.order_purchase_timestamp between '2017-01-01' and '2017-06-30')  (cost=12513 rows=27806) (actual time=10.5..100 rows=14516 loops=1)
                         -> Single-row covering index lookup on c using PRIMARY (customer_id=o.customer_id)  (cost=0.25 rows=1) (actual time=0.00487..0.00494 rows=1 loops=14516)
                     -> Filter: (o.order_id = op.order_id)  (cost=1 rows=1.17) (actual time=0.0078..0.0101 rows=1.19 loops=14516)
                         -> Covering index lookup on op using idx_order_payment_value (order_id=o.order_id)  (cost=1 rows=1.17) (actual time=0.00666..0.0087 rows=1.19 loops=14516)
 

CONSULTA 4.3
-> Sort: media_avaliacao DESC  (actual time=3988..3989 rows=3090 loops=1)
     -> Table scan on <temporary>  (actual time=3976..3977 rows=3090 loops=1)
         -> Aggregate using temporary table  (actual time=3976..3976 rows=3090 loops=1)
             -> Nested loop inner join  (cost=113955 rows=100262) (actual time=44.6..3728 rows=102230 loops=1)
                 -> Nested loop inner join  (cost=78863 rows=100262) (actual time=42.8..3384 rows=102230 loops=1)
                     -> Nested loop inner join  (cost=44631 rows=96821) (actual time=39.4..1825 rows=99224 loops=1)
                         -> Table scan on orw  (cost=10744 rows=96821) (actual time=32.9..781 rows=99224 loops=1)
                         -> Filter: (o.order_id = orw.order_id)  (cost=0.25 rows=1) (actual time=0.0101..0.0102 rows=1 loops=99224)
                             -> Single-row covering index lookup on o using PRIMARY (order_id=orw.order_id)  (cost=0.25 rows=1) (actual time=0.00925..0.00929 rows=1 loops=99224)
                     -> Filter: ((oi.order_id = o.order_id) and (oi.seller_id is not null))  (cost=0.25 rows=1.04) (actual time=0.0137..0.0154 rows=1.03 loops=99224)
                         -> Index lookup on oi using PRIMARY (order_id=o.order_id)  (cost=0.25 rows=1.04) (actual time=0.0127..0.0143 rows=1.03 loops=99224)
                 -> Single-row covering index lookup on s using PRIMARY (seller_id=oi.seller_id)  (cost=0.25 rows=1) (actual time=0.00295..0.00301 rows=1 loops=102230)
 

 CONSULTA 4.4
-> Table scan on <temporary>  (actual time=2712..2740 rows=45027 loops=1)
     -> Aggregate using temporary table  (actual time=2712..2712 rows=45026 loops=1)
         -> Nested loop inner join  (cost=73043 rows=57536) (actual time=28.6..1753 rows=52985 loops=1)
             -> Nested loop inner join  (cost=52906 rows=57536) (actual time=14.9..1165 rows=52985 loops=1)
                 -> Filter: (op.order_id is not null)  (cost=12631 rows=115071) (actual time=8.25..259 rows=115986 loops=1)
                     -> Covering index scan on op using idx_order_payment_value  (cost=12631 rows=115071) (actual time=7.82..246 rows=115986 loops=1)
                 -> Filter: ((o.order_purchase_timestamp between '2017-01-01' and '2017-12-31') and (o.order_id = op.order_id) and (o.customer_id is not null))  (cost=0.25 rows=0.5) (actual time=0.00755..0.0076 rows=0.457 loops=115986)
                     -> Single-row index lookup on o using PRIMARY (order_id=op.order_id)  (cost=0.25 rows=1) (actual time=0.0061..0.00613 rows=1 loops=115986)
             -> Single-row covering index lookup on c using PRIMARY (customer_id=o.customer_id)  (cost=0.25 rows=1) (actual time=0.0107..0.0108 rows=1 loops=52985)

 CONSULTA 4.5
-> Limit: 5 row(s)  (actual time=939..939 rows=5 loops=1)
     -> Sort: total_vendas DESC, limit input to 5 row(s) per chunk  (actual time=939..939 rows=5 loops=1)
         -> Table scan on <temporary>  (actual time=933..934 rows=6817 loops=1)
             -> Aggregate using temporary table  (actual time=933..933 rows=6817 loops=1)
                 -> Nested loop inner join  (cost=15865 rows=28794) (actual time=12.9..894 rows=14853 loops=1)
                     -> Filter: (o.order_purchase_timestamp between '2017-01-01' and '2017-06-30')  (cost=6018 rows=27806) (actual time=2.82..61.4 rows=14516 loops=1)
                         -> Covering index range scan on o using idx_order_date over ('2017-01-01 00:00:00' <= order_purchase_timestamp <= '2017-06-30 00:00:00')  (cost=6018 rows=27806) (actual time=2.81..43.1 rows=14516 loops=1)
                     -> Filter: (oi.order_id = o.order_id)  (cost=0.251 rows=1.04) (actual time=0.0551..0.0569 rows=1.02 loops=14516)
                         -> Covering index lookup on oi using PRIMARY (order_id=o.order_id)  (cost=0.251 rows=1.04) (actual time=0.0541..0.0558 rows=1.02 loops=14516)
 
 

 CONSULTA 4.6
-> Limit: 10 row(s)  (cost=10076 rows=10) (actual time=528..528 rows=10 loops=1)
     -> Sort: atraso_dias DESC, limit input to 10 row(s) per chunk  (cost=10076 rows=98750) (actual time=528..528 rows=10 loops=1)
         -> Filter: (o.order_delivered_customer_date > o.order_estimated_delivery_date)  (cost=10076 rows=98750) (actual time=27.2..520 rows=7827 loops=1)
             -> Table scan on o  (cost=10076 rows=98750) (actual time=27.1..505 rows=99441 loops=1)
 

 CONSULTA 4.7
-> Limit: 10 row(s)  (actual time=4695..4695 rows=10 loops=1)
     -> Sort: total_gasto DESC, limit input to 10 row(s) per chunk  (actual time=4695..4695 rows=10 loops=1)
         -> Table scan on <temporary>  (actual time=4601..4652 rows=99440 loops=1)
             -> Aggregate using temporary table  (actual time=4601..4601 rows=99439 loops=1)
                 -> Nested loop inner join  (cost=93181 rows=115071) (actual time=56..2636 rows=115986 loops=1)
                     -> Nested loop inner join  (cost=52906 rows=115071) (actual time=43.4..1610 rows=115986 loops=1)
                         -> Filter: (op.order_id is not null)  (cost=12631 rows=115071) (actual time=24.2..424 rows=115986 loops=1)
                             -> Covering index scan on op using idx_order_payment_value  (cost=12631 rows=115071) (actual time=24.2..407 rows=115986 loops=1)
                         -> Filter: ((o.order_id = op.order_id) and (o.customer_id is not null))  (cost=0.25 rows=1) (actual time=0.00978..0.0099 rows=1 loops=115986)
                             -> Single-row index lookup on o using PRIMARY (order_id=op.order_id)  (cost=0.25 rows=1) (actual time=0.00873..0.00877 rows=1 loops=115986)
                     -> Single-row covering index lookup on c using PRIMARY (customer_id=o.customer_id)  (cost=0.25 rows=1) (actual time=0.00846..0.00852 rows=1 loops=115986)
 

 CONSULTA 4.8
-> Sort: media_tempo_entrega DESC  (actual time=1419..1419 rows=27 loops=1)
     -> Table scan on <temporary>  (actual time=1417..1417 rows=27 loops=1)
         -> Aggregate using temporary table  (actual time=1417..1417 rows=27 loops=1)
             -> Nested loop inner join  (cost=27357 rows=49375) (actual time=16.9..1240 rows=96476 loops=1)
                 -> Filter: ((o.order_delivered_customer_date is not null) and (o.customer_id is not null))  (cost=10076 rows=49375) (actual time=5.8..464 rows=96476 loops=1)
                     -> Table scan on o  (cost=10076 rows=98750) (actual time=5.8..447 rows=99441 loops=1)
                 -> Single-row index lookup on c using PRIMARY (customer_id=o.customer_id)  (cost=0.25 rows=1) (actual time=0.00761..0.00768 rows=1 loops=96476)
 